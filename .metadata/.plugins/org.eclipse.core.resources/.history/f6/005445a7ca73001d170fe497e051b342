package com.myProject.myapp.inventory;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

@Controller
public class InventoryController {

	public InventoryController() {
		System.out.println("InventoryController 생성");

	}

	@RequestMapping(value = "/inventoryboard/inventoryList", method = RequestMethod.GET)
	public String inventoryList() {
		return "/inventoryboard/inventoryList";
	}

	@GetMapping("inventoryboard/addInventory")
	public String addInventory() {
		return "/inventoryboard/addInventory";
	}
	
	//요청 URI 주소가 같더라도, 전송 방식에 따라서 매핑을 다르게 진행하기 때문에
	//같은 주소를 사용하는 것이 가능(GET > 화면, POST > 입력값)
	
	/*
	 1. 전통적인 jsp/servlet 방식의 파라미터 읽기 처리 방법.
	 - HttpServletRequest 객체를 활용. (우리가 jsp에서 활용하던 방식)
	 
	
	@PostMapping("/join")
	public void register(HttpServletRequest request) {
		System.out.println("/request/join: POST");
		
		System.out.println("ID: " + request.getParameter("userId"));
		System.out.println("PW: " + request.getParameter("userPw"));
		System.out.println("HOBBY: " + Arrays.toString(request.getParameterValues("hobby")));
	}
	*/
		
	@PostMapping("/inventoryboard/addInventory")
	public String addInventory() {
		return "/inventoryboard/addInventory";
	}
}
